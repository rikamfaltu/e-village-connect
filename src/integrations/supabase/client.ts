
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://cyrlrmczannlnnzgzxjc.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImN5cmxybWN6YW5ubG5uemd6eGpjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM2MTkzNjksImV4cCI6MjA1OTE5NTM2OX0.gOoUxQuBkMO1HFIeCBQiaSqioisUZDAV_6nTMWHY9EI";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Add debug logs to check if supabase client is initialized correctly
console.log("Supabase client initialized:", !!supabase);

// Check if problem_images bucket exists and create it if needed
supabase.storage.listBuckets().then((response) => {
  if (response.error) {
    console.error("Error listing buckets:", response.error);
  } else {
    console.log("Available storage buckets:", response.data);
    
    // Check if problem_images bucket exists
    const problemImagesBucket = response.data.find(bucket => bucket.name === 'problem_images');
    
    if (!problemImagesBucket) {
      console.log("Creating problem_images bucket...");
      supabase.storage.createBucket('problem_images', {
        public: true, // Make the bucket public
        fileSizeLimit: 5242880 // 5MB in bytes
      }).then(createResponse => {
        if (createResponse.error) {
          console.error("Error creating problem_images bucket:", createResponse.error);
        } else {
          console.log("problem_images bucket created successfully");
        }
      });
    } else {
      console.log("problem_images bucket already exists");
    }
  }
});

// Update bucket policy to allow public access for anonymous users if needed
const updateBucketPolicy = async () => {
  try {
    const { error } = await supabase.storage.from('problem_images').updateBucket({
      public: true
    });
    
    if (error) {
      console.error("Error updating bucket policy:", error);
    } else {
      console.log("Bucket policy updated successfully to public");
    }
  } catch (err) {
    console.error("Unexpected error updating bucket policy:", err);
  }
};

// Try to update the bucket policy (will only work if the bucket exists)
updateBucketPolicy();
